# ============================================================================== 
# GitHub Actions Workflow: Ubuntu x64 Unit Testing (22.04 & 24.04)
# ============================================================================== 
#
# This workflow performs continuous integration testing for RadarSimPy on 
# both Ubuntu 22.04 and 24.04 x64 platforms. It builds and tests the radar simulation
# library across multiple Python versions to ensure compatibility and reliability.
#
# Triggers:
#   - Push to master branch
#   - Pull requests targeting master branch
#
# Test Matrix:
#   - Python versions: 3.9, 3.10, 3.11, 3.12, 3.13
#   - Platform: Ubuntu 22.04, Ubuntu 24.04
#   - Compilers: GCC-11 (22.04), GCC-13 (24.04)
#   - Architecture: x64 (CPU-only builds)
#
# Key Features:
#   - Pip package caching for faster builds
#   - GCC environment setup for C++ compilation
#   - System information display for debugging
#   - Build log capture on failure
#   - Test result artifact upload
#   - Timeout protection (60 minutes)
#   - Fail-fast disabled to test all Python versions
#
# Requirements:
#   - RADARSIMC SSH key secret for submodule access
#   - CMake, GCC, and Python dependencies
#   - build.sh script
#
# ============================================================================== 

name: Ubuntu Unit Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    timeout-minutes: 60
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu 22.04, GCC-11
          - runner: ubuntu-22.04
            c_compiler: gcc-11
            cxx_compiler: g++-11
            os_label: ubuntu22
            python-version: "3.9"
          - runner: ubuntu-22.04
            c_compiler: gcc-11
            cxx_compiler: g++-11
            os_label: ubuntu22
            python-version: "3.10"
          - runner: ubuntu-22.04
            c_compiler: gcc-11
            cxx_compiler: g++-11
            os_label: ubuntu22
            python-version: "3.11"
          - runner: ubuntu-22.04
            c_compiler: gcc-11
            cxx_compiler: g++-11
            os_label: ubuntu22
            python-version: "3.12"
          - runner: ubuntu-22.04
            c_compiler: gcc-11
            cxx_compiler: g++-11
            os_label: ubuntu22
            python-version: "3.13"
          # Ubuntu 24.04, GCC-13
          - runner: ubuntu-24.04
            c_compiler: gcc-13
            cxx_compiler: g++-13
            os_label: ubuntu24
            python-version: "3.9"
          - runner: ubuntu-24.04
            c_compiler: gcc-13
            cxx_compiler: g++-13
            os_label: ubuntu24
            python-version: "3.10"
          - runner: ubuntu-24.04
            c_compiler: gcc-13
            cxx_compiler: g++-13
            os_label: ubuntu24
            python-version: "3.11"
          - runner: ubuntu-24.04
            c_compiler: gcc-13
            cxx_compiler: g++-13
            os_label: ubuntu24
            python-version: "3.12"
          - runner: ubuntu-24.04
            c_compiler: gcc-13
            cxx_compiler: g++-13
            os_label: ubuntu24
            python-version: "3.13"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.RADARSIMC}}
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Display system information
        run: |
          echo "Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "CMake version:"
          cmake --version
          echo "GCC version:"
          ${{ matrix.c_compiler }} --version
          echo "G++ version:"
          ${{ matrix.cxx_compiler }} --version

      - name: Build & Test
        env:
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cxx_compiler }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          sudo chown -R $USER:$USER /home/runner/work/radarsimpy
          chmod +x build.sh
          ./build.sh --tier=standard --arch=cpu --test=on

      - name: Display build logs on failure
        if: failure()
        run: |
          if [ -f "build/CMakeFiles/CMakeOutput.log" ]; then
            echo "=== CMake Output Log ==="
            tail -n 100 "build/CMakeFiles/CMakeOutput.log"
          fi
          if [ -f "build/CMakeFiles/CMakeError.log" ]; then
            echo "=== CMake Error Log ==="
            tail -n 100 "build/CMakeFiles/CMakeError.log"
          fi

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-python-${{ matrix.python-version }}-${{ matrix.os_label }}
          path: build_logs/
          retention-days: 1
          if-no-files-found: warn
